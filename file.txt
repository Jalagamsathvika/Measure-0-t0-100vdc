/#include <xc.h>
#include <stdio.h>
#include "lcd.h"

// Configuration bits for PIC16F877A
#pragma config FOSC = HS        // Oscillator Selection bits (HS oscillator)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = ON       // Brown-out Reset Enable bit (BOR enabled)
#pragma config LVP = OFF        // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3 is digital I/O, HV on MCLR must be used for programming)
#pragma config CPD = OFF        // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT = OFF        // Flash Program Memory Write Enable bits (Write protection off)
#pragma config CP = OFF         // Flash Program Memory Code Protection bit (Code protection off)

#define _XTAL_FREQ 20000000     // Define the operating frequency of the microcontroller

void ADC_Init() {
    ADCON0 = 0x41;        // ADCON0 configuration
    ADCON1 = 0x80;        // ADCON1 configuration
}

unsigned int ADC_Read(unsigned char channel) {
    ADCON0 &= 0xC5;       // Select the A/D channel
    ADCON0 |= channel << 3;
    __delay_ms(2);        // Acquisition time
    GO_nDONE = 1;         // Start A/D conversion
    while(GO_nDONE);      // Wait for conversion to complete
    return ((ADRESH << 8) + ADRESL);  // Return result
}

void main() {
    unsigned int adc_value;
    float voltage, input_voltage;
    char buffer[16];

    TRISD = 0x00;          // Set PORTD as output
    Lcd_Init();            // Initialize LCD
    ADC_Init();            // Initialize ADC

    Lcd_Clear();           // Clear LCD
    Lcd_Set_Cursor(1, 1);  // Set cursor position
    Lcd_Write_String("Voltage:");

    while(1) {
        adc_value = ADC_Read(0);   // Read ADC value from channel 0
        voltage = adc_value * 5.0 / 1023.0;  // Calculate voltage
        input_voltage = voltage * 20.0;      // Calculate input voltage

        sprintf(buffer, "%.2f V", input_voltage);  // Convert to string
        Lcd_Set_Cursor(2, 1);    // Set cursor position
        Lcd_Write_String(buffer);  // Display voltage

        __delay_ms(1000);  // Delay for 1 second
    }
}


#ifndef LCD_H
#define LCD_H

#include <xc.h>

#define RS RD0
#define EN RD1
#define D4 RD2
#define D5 RD3
#define D6 RD4
#define D7 RD5

void Lcd_Port(char a);
void Lcd_Cmd(char a);
void Lcd_Clear();
void Lcd_Set_Cursor(char a, char b);
void Lcd_Init();
void Lcd_Write_Char(char a);
void Lcd_Write_String(char *a);

#endif // LCD_H
#include "lcd.h"

void Lcd_Port(char a) {
    if(a & 1) D4 = 1; else D4 = 0;
    if(a & 2) D5 = 1; else D5 = 0;
    if(a & 4) D6 = 1; else D6 = 0;
    if(a & 8) D7 = 1; else D7 = 0;
}

void Lcd_Cmd(char a) {
    RS = 0;               // RS = 0 for command mode
    Lcd_Port(a);          // Send command to LCD
    EN = 1;               // Enable pulse
    __delay_ms(4);
    EN = 0;
}

void Lcd_Clear() {
    Lcd_Cmd(0);           // Clear command
    Lcd_Cmd(1);           // Clear command
}

void Lcd_Set_Cursor(char a, char b) {
    char temp, z, y;
    if(a == 1) {
        temp = 0x80 + b - 1;
        z = temp >> 4;
        y = temp & 0x0F;
        Lcd_Cmd(z);
        Lcd_Cmd(y);
    } else if(a == 2) {
        temp = 0xC0 + b - 1;
        z = temp >> 4;
        y = temp & 0x0F;
        Lcd_Cmd(z);
        Lcd_Cmd(y);
    }
}

void Lcd_Init() {
    Lcd_Port(0x00);
    __delay_ms(20);
    Lcd_Cmd(0x03);
    __delay_ms(5);
    Lcd_Cmd(0x03);
    __delay_ms(11);
    Lcd_Cmd(0x03);
    Lcd_Cmd(0x02);
    Lcd_Cmd(0x02);
    Lcd_Cmd(0x08);
    Lcd_Cmd(0x00);
    Lcd_Cmd(0x0C);
    Lcd_Cmd(0x00);
    Lcd_Cmd(0x06);
}

void Lcd_Write_Char(char a) {
    char temp, y;
    temp = a & 0x0F;
    y = a & 0xF0;
    RS = 1;               // RS = 1 for data mode
    Lcd_Port(y >> 4);     // Send higher nibble
    EN = 1;               // Enable pulse
    __delay_us(40);
    EN = 0;
    Lcd_Port(temp);       // Send lower nibble
    EN = 1;               // Enable pulse
    __delay_us(40);
    EN = 0;
}

void Lcd_Write_String(char *a) {
    int i;
    for(i = 0; a[i] != '\0'; i++)
        Lcd_Write_Char(a[i]);
}
